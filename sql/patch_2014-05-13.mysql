
-- ---------------------------------------------------------------------------------------------------
-- Create   `role` table
-- Populate it by recreating the timeline of respecialization events from log_message and worker tables.
-- Copy     all the data from meta to pipeline_wide_parameters
-- Add      `log_message`.role_id column
-- FKeys    to establish a practical link via `role` table
-- Replace  some functions and procedures to work with the new `role` table
-- ---------------------------------------------------------------------------------------------------

SET @expected_version = 59;

    -- make MySQL stop immediately after it encounters division by zero:
SET SESSION sql_mode='TRADITIONAL';

    -- warn that we detected the schema version mismatch:
SELECT CONCAT(  'The patch only applies to schema version ',
                @expected_version,
                ', but the current schema version is ',
                meta_value,
                ', so skipping the rest.') AS ''
    FROM hive_meta WHERE meta_key='hive_sql_schema_version' AND meta_value<>@expected_version;

    -- cause division by zero only if current version differs from the expected one:
INSERT INTO hive_meta (meta_key, meta_value)
    SELECT 'this_should_never_be_inserted', 1 FROM hive_meta WHERE NOT 1/(meta_key<>'hive_sql_schema_version' OR meta_value=@expected_version);

SELECT CONCAT(  'The patch seems to be compatible with schema version ',
                @expected_version,
                ', applying the patch...') AS '';

    -- Now undo the change so that we could patch potentially non-TRADITIONAL schema:
SET SESSION sql_mode='';

-- ----------------------------------<actual_patch> -------------------------------------------------

    -- Adding a new table for tracking Roles of multirole Workers:
CREATE TABLE role (
    role_id                 INTEGER     NOT NULL PRIMARY KEY AUTO_INCREMENT,
    worker_id               INTEGER     NOT NULL,
    analysis_id             INTEGER     NOT NULL,
    when_started            TIMESTAMP   NOT NULL DEFAULT CURRENT_TIMESTAMP,
    when_finished           TIMESTAMP                    NULL,  -- mysql's special for "TIMESTAMP DEFAULT NULL"
    attempted_jobs          INTEGER     NOT NULL DEFAULT 0,
    done_jobs               INTEGER     NOT NULL DEFAULT 0,

    KEY worker   (worker_id),
    KEY analysis (analysis_id)
) COLLATE=latin1_swedish_ci ENGINE=InnoDB;


    -- our main source are the parsed messages about Workers' respecialization:
CREATE TEMPORARY TABLE respec_main
    SELECT log_message_id sort_idx, worker_id, time, SUBSTRING_INDEX( SUBSTRING_INDEX(msg,') to ',1), '(',-1) from_analysis_id, SUBSTRING_INDEX( SUBSTRING_INDEX(msg,'(',-1), ')', 1) to_analysis_id
    FROM log_message
    WHERE msg LIKE 'respecializing from %';

    -- we also take in the events of Workers' births (in case of non-specializing Workers):
CREATE TEMPORARY TABLE respec_first
    SELECT 0 sort_idx, worker_id, born time, NULL from_analysis_id, COALESCE(
            (SELECT from_analysis_id FROM respec_main WHERE worker_id=ow.worker_id ORDER BY sort_idx limit 1),
            (SELECT analysis_id FROM worker iw WHERE iw.worker_id=ow.worker_id)
           ) to_analysis_id
    FROM worker ow;

    -- and the events of Workers' deaths:
CREATE TEMPORARY TABLE respec_last
    SELECT 2000000000 sort_idx, worker_id, died time, (SELECT analysis_id FROM worker iw WHERE iw.worker_id=ow.worker_id) from_analysis_id, NULL to_analysis_id
    FROM worker ow;

    -- merge all the tree together:
CREATE TEMPORARY TABLE respec_merged SELECT * FROM respec_first UNION SELECT * FROM respec_main UNION SELECT * FROM respec_last ORDER BY worker_id, sort_idx;

    -- cannot join a temporary table to itself, so need another copy:
CREATE TEMPORARY TABLE respec_merged2 SELECT * FROM respec_merged;

    -- shift two copies of the same table to transform timestamps into ranges:
CREATE TEMPORARY TABLE pre_role
    SELECT t1.worker_id, t1.to_analysis_id analysis_id, t1.time when_started, min(t2.time) when_finished
    FROM respec_merged t1
    JOIN respec_merged2 t2 ON t1.worker_id=t2.worker_id AND t1.sort_idx<t2.sort_idx
    GROUP BY worker_id, t1.sort_idx;

    -- add approximate job counts:
INSERT INTO role (worker_id, analysis_id, when_started, when_finished, attempted_jobs, done_jobs)
    SELECT p.*, COUNT(*), COUNT(status='DONE')
    FROM pre_role p
    JOIN job USING(worker_id, analysis_id)
    WHERE completed BETWEEN when_started AND when_finished GROUP BY worker_id, analysis_id;


    -- new column in log_message to log the role_id:
ALTER TABLE log_message ADD COLUMN role_id INTEGER DEFAULT NULL AFTER job_id;

    -- add foreign keys linking the new table to the existing ones:
ALTER TABLE role                    ADD FOREIGN KEY (analysis_id)               REFERENCES analysis_base(analysis_id);
ALTER TABLE role                    ADD FOREIGN KEY (worker_id)                 REFERENCES worker(worker_id)                    ON DELETE CASCADE;
ALTER TABLE log_message             ADD FOREIGN KEY (role_id)                   REFERENCES role(role_id)                        ON DELETE CASCADE;


    -- replace affected views and procedures:
CREATE OR REPLACE VIEW resource_usage_stats AS
    SELECT CONCAT(a.logic_name,'(',a.analysis_id,')') analysis,
           w.meadow_type,
           CONCAT(rc.name,'(',rc.resource_class_id,')') resource_class,
           u.exit_status,
           count(*) workers,
           min(mem_megs) AS min_mem_megs, round(avg(mem_megs),2) AS avg_mem_megs, max(mem_megs) AS max_mem_megs,
           min(swap_megs) AS min_swap_megs, round(avg(swap_megs),2) AS avg_swap_megs, max(swap_megs) AS max_swap_megs
    FROM analysis_base a
    JOIN resource_class rc USING(resource_class_id)
    LEFT JOIN role r USING(analysis_id)
    LEFT JOIN worker w USING(worker_id)
    LEFT JOIN worker_resource_usage u USING (worker_id)
    GROUP BY a.analysis_id, w.meadow_type, u.exit_status
    ORDER BY a.analysis_id, w.meadow_type, u.exit_status;


DROP PROCEDURE IF EXISTS time_analysis;
CREATE PROCEDURE time_analysis(IN param_logic_name_pattern char(64))
READS SQL DATA
    SELECT
        (UNIX_TIMESTAMP(max(when_finished))-UNIX_TIMESTAMP(min(when_started)))/60 AS measured_in_minutes,
        (UNIX_TIMESTAMP(max(when_finished))-UNIX_TIMESTAMP(min(when_started)))/3600 AS measured_in_hours,
        (UNIX_TIMESTAMP(max(when_finished))-UNIX_TIMESTAMP(min(when_started)))/3600/24 AS measured_in_days
        FROM role JOIN analysis_base USING (analysis_id)
        WHERE logic_name like param_logic_name_pattern;


DROP PROCEDURE IF EXISTS drop_hive_tables;
DELIMITER //
CREATE PROCEDURE drop_hive_tables()
MODIFIES SQL DATA
BEGIN
    DROP VIEW IF EXISTS msg, progress;
    DROP TABLE IF EXISTS pipeline_wide_parameters, analysis_stats_monitor, resource_description, analysis_data, role, job_file, dataflow_rule, analysis_ctrl_rule, analysis_stats, log_message, accu, job, worker, analysis_base, resource_class, hive_meta;
END; //
DELIMITER ;

-- ----------------------------------</actual_patch> -------------------------------------------------


    -- increase the schema version by one:
UPDATE hive_meta SET meta_value=meta_value+1 WHERE meta_key='hive_sql_schema_version';

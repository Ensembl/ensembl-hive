
CREATE TRIGGER add_job AFTER INSERT ON job
FOR EACH ROW
    UPDATE analysis_stats SET
        total_job_count     = total_job_count     + 1,
        unclaimed_job_count = unclaimed_job_count + (CASE NEW.status WHEN 'READY'  THEN 1                         ELSE 0 END),
        done_job_count      = done_job_count      + (CASE NEW.status WHEN 'DONE'   THEN 1 WHEN 'PASSED_ON' THEN 1 ELSE 0 END),
        failed_job_count    = failed_job_count    + (CASE NEW.status WHEN 'FAILED' THEN 1                         ELSE 0 END),
        status              = (CASE WHEN status!='BLOCKED' THEN 'LOADING' ELSE 'BLOCKED' END)
    WHERE analysis_id = NEW.analysis_id;

CREATE TRIGGER delete_job AFTER DELETE ON job
FOR EACH ROW
    UPDATE analysis_stats SET
        total_job_count     = total_job_count     - 1,
        unclaimed_job_count = unclaimed_job_count - (CASE OLD.status WHEN 'READY'  THEN 1                         ELSE 0 END),
        done_job_count      = done_job_count      - (CASE OLD.status WHEN 'DONE'   THEN 1 WHEN 'PASSED_ON' THEN 1 ELSE 0 END),
        failed_job_count    = failed_job_count    - (CASE OLD.status WHEN 'FAILED' THEN 1                         ELSE 0 END)
    WHERE analysis_id = OLD.analysis_id;

CREATE TRIGGER update_job AFTER UPDATE ON job
FOR EACH ROW
    UPDATE analysis_stats SET
        unclaimed_job_count = unclaimed_job_count + (CASE NEW.status WHEN 'READY'  THEN 1 WHEN 'CLAIMED'   THEN -1 ELSE 0 END),
        done_job_count      = done_job_count      + (CASE NEW.status WHEN 'DONE'   THEN 1 WHEN 'PASSED_ON' THEN  1 ELSE 0 END),
        failed_job_count    = failed_job_count    + (CASE NEW.status WHEN 'FAILED' THEN 1                          ELSE 0 END)
    WHERE analysis_id = NEW.analysis_id;


    # inform the runtime part of the system that triggers are in place:
INSERT INTO meta (meta_key, meta_value) VALUES ('hive_use_triggers', '1');

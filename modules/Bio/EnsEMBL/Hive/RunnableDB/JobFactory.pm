
=pod 

=head1 NAME

Bio::EnsEMBL::Hive::RunnableDB::JobFactory

=head1 SYNOPSIS

This is a RunnableDB module that implements Bio::EnsEMBL::Hive::Process interface
and is ran by Workers during the execution of eHive pipelines.
It is not generally supposed to be instantiated and used outside of this framework.

Please refer to Bio::EnsEMBL::Hive::Process documentation to understand the basics of the RunnableDB interface.

Please refer to Bio::EnsEMBL::Hive::PipeConfig::* pipeline configuration files to understand how to configure pipelines.

=head1 DESCRIPTION

This is a generic RunnableDB module for creating batches of similar jobs using dataflow mechanism
(a fan of jobs is created in one branch and the funnel in another).
Make sure you wire this buliding block properly from outside.

You can supply as parameter one of 4 sources of ids from which the batches will be generated:

    param('inputlist');  The list is explicitly given in the parameters, can be abbreviated: 'inputlist' => ['a'..'z']

    param('inputfile');  The list is contained in a file whose name is supplied as parameter: 'inputfile' => 'myfile.txt'

    param('inputquery'); The list is generated by an SQL query (against the production database by default) : 'inputquery' => 'SELECT object_id FROM object WHERE x=y'

    param('inputcmd');   The list is generated by running a system command: 'inputcmd' => 'find /tmp/big_directory -type f'

If 'sema_funnel_branch_code' is defined, it becomes the destination branch for a semaphored funnel job,
whose count is automatically set to the number of fan jobs that it will be waiting for.

=cut

package Bio::EnsEMBL::Hive::RunnableDB::JobFactory;

use strict;
use DBI;
use Bio::EnsEMBL::Hive::Utils ('dir_revhash');  # import dir_revhash

use base ('Bio::EnsEMBL::Hive::Process');

=head2 fetch_input

    Description : Implements fetch_input() interface method of Bio::EnsEMBL::Hive::Process that is used to read in parameters and load data.
                  Here we have nothing to do.

=cut

sub fetch_input {
}

=head2 run

    Description : Implements run() interface method of Bio::EnsEMBL::Hive::Process that is used to perform the main bulk of the job (minus input and output).

    param('input_id'):  The template that will become the input_id of newly created jobs (Note: this is something entirely different from $self->input_id of the current JobFactory job).

    param('step'):      The requested size of the minibatch (1 by default). The real size may be smaller.

    param('randomize'): Shuffles the ids before creating jobs - can sometimes lead to better overall performance of the pipeline. Doesn't make any sence for minibatches (step>1).

    param('delimiter'): If you set it your lines in file/cmd mode will be split into columns that you can use individually when constructing the template input_id hash.

    param('key_column'): If every line of your input is a list (it happens, for example, when your SQL returns multiple columns or you have set the 'delimiter' in file/cmd mode)
                         this is the way to say which column is undergoing 'ranging'

    param('hashed_column_number'): if defined, turns 'hashed_column_number' into a dir_revhash and appends it to the list of fields.


        # The following 4 parameters are mutually exclusive and define the source of ids for the jobs:

    param('inputlist');  The list is explicitly given in the parameters, can be abbreviated: 'inputlist' => ['a'..'z']

    param('inputfile');  The list is contained in a file whose name is supplied as parameter: 'inputfile' => 'myfile.txt'

    param('inputquery'); The list is generated by an SQL query (against the production database by default) : 'inputquery' => 'SELECT object_id FROM object WHERE x=y'

    param('inputcmd');   The list is generated by running a system command: 'inputcmd' => 'find /tmp/big_directory -type f'

=cut

sub run {
    my $self = shift @_;

    my $template_hash   = $self->param('input_id')      || die "'input_id' is an obligatory parameter";
    my $step            = $self->param('step')          || 1;
    my $randomize       = $self->param('randomize')     || 0;

    my $key_column      = $self->param('key_column')    || 0;
    my $delimiter       = $self->param('delimiter');

    my $hashed_column_number   = $self->param('hashed_column_number');   # skip this step if undefined

    my $inputlist       = $self->param('inputlist');
    my $inputfile       = $self->param('inputfile');
    my $inputquery      = $self->param('inputquery');
    my $inputcmd        = $self->param('inputcmd');

    my $list = $self->param_substitute( $inputlist )
        || ($inputquery && $self->_make_list_from_query( $self->param_substitute( $inputquery ) ))
        || ($inputfile  && $self->_make_list_from_open(  $self->param_substitute( $inputfile  ),      $delimiter ))
        || ($inputcmd   && $self->_make_list_from_open(  $self->param_substitute( $inputcmd   ).' |', $delimiter ))
        || die "range of values should be defined by setting 'inputlist', 'inputfile' or 'inputquery'";

    if($randomize) {
        _fisher_yates_shuffle_in_place($list);
    }

    if(defined($hashed_column_number) and scalar(@$list)) {

        if(!ref($list->[0])) {
            $list = [ map { [$_] } @$list ];    # create the second dimension if it was missing
        }

        foreach my $row (@$list) {
            push @$row, dir_revhash($row->[$hashed_column_number]);
        }
    }

    my $output_ids = $self->_split_list_into_ranges($template_hash, $list, $step, $key_column);
    $self->param('output_ids', $output_ids);
}

=head2 write_output

    Description : Implements write_output() interface method of Bio::EnsEMBL::Hive::Process that is used to deal with job's output after the execution.
                  Here we rely on the dataflow mechanism to create jobs.

    param('fan_branch_code'): defines the branch where the fan of jobs is created (2 by default).

    param('sema_funnel_branch_code'): defines the branch where the semaphored funnel for the fan is created (no default - skipped if not defined)

=cut

sub write_output {  # nothing to write out, but some dataflow to perform:
    my $self = shift @_;

    my $output_ids              = $self->param('output_ids');
    my $fan_branch_code         = $self->param('fan_branch_code') || 2;
    my $sema_funnel_branch_code = $self->param('sema_funnel_branch_code');  # if set, it is a request for a semaphored funnel

    if($sema_funnel_branch_code) {

            # first flow into the sema_funnel_branch
        my ($funnel_job_id) = @{ $self->dataflow_output_id($self->input_id, $sema_funnel_branch_code, { -semaphore_count => scalar(@$output_ids) })  };

            # then "fan out" into fan_branch, and pass the $funnel_job_id to all of them
        my $fan_job_ids = $self->dataflow_output_id($output_ids, $fan_branch_code, { -semaphored_job_id => $funnel_job_id } );

    } else {

            # simply "fan out" into fan_branch_code:
        $self->dataflow_output_id($output_ids, $fan_branch_code);
    }
}

################################### main functionality starts here ###################

=head2 _make_list_from_query
    
    Description: this is a private method that loads ids from a given sql query

    param('db_conn'): An optional hash to pass in connection parameters to the database upon which the query will have to be run.

=cut

sub _make_list_from_query {
    my ($self, $inputquery) = @_;

    my $dbc;
    if(my $db_conn = $self->param('db_conn')) {
        $dbc = DBI->connect("DBI:mysql:$db_conn->{-dbname}:$db_conn->{-host}:$db_conn->{-port}", $db_conn->{-user}, $db_conn->{-pass}, { RaiseError => 1 });
    } else {
        $dbc = $self->db->dbc;
    }

    my @list = ();
    my $sth = $dbc->prepare($inputquery);
    $sth->execute();
    while (my @cols = $sth->fetchrow_array()) {
        push @list, scalar(@cols)==1 ? $cols[0] : \@cols;
    }
    $sth->finish();

    return \@list;
}

=head2 _make_list_from_open
    
    Description: this is a private method that loads ids from a given file or command pipe

=cut

sub _make_list_from_open {
    my ($self, $input_file_or_pipe, $delimiter) = @_;

    my @list = ();
    open(FILE, $input_file_or_pipe) or die "Could not open '$input_file_or_pipe' because: $!";
    while(my $line = <FILE>) {
        chomp $line;

        push @list, defined($delimiter) ? [ split(/$delimiter/, $line) ] : $line;
    }
    close FILE;

    return \@list;
}

=head2 _split_list_into_ranges
    
    Description: this is a private method that splits a list of ids into sub-ranges

=cut

sub _split_list_into_ranges {
    my ($self, $template_hash, $list, $step, $key_column) = @_;

    my @ranges = ();

    while(@$list) {
        my $start_line  = shift @$list;
        my $range_start = (ref($start_line) eq 'ARRAY') ? $start_line->[$key_column] : $start_line;

        my $range_end   = $range_start;
        my $range_count = 1;
        my $next_line   = $start_line; # safety, in case next while doesn't execute even once
        while($range_count<$step && @$list) {
               $next_line   = shift @$list;
            my $next_value  = (ref($next_line) eq 'ARRAY') ? $next_line->[$key_column] : $next_line;

            my $predicted_next = $range_end;
            if(++$predicted_next eq $next_value) {
                $range_end = $next_value;
                $range_count++;
            } else {
                unshift @$list, $next_line;
                last;
            }
        }

            # pseudo-parameters that will be substituted in the template hash:
        $self->param('_range_start', $range_start);
        $self->param('_range_end',   $range_end);
        $self->param('_range_count', $range_count);

        if(ref($start_line) eq 'ARRAY') {
            foreach my $i (0..scalar(@$start_line)-1) {
                $self->param("_start_$i", $start_line->[$i]);
                $self->param("_end_$i",   $next_line->[$i]);
            }
        }

        push @ranges, $self->param_substitute($template_hash);
    }
    return \@ranges;
}

=head2 _fisher_yates_shuffle_in_place
    
    Description: this is a private function (not a method) that shuffles a list of ids

=cut

sub _fisher_yates_shuffle_in_place {
    my $array = shift @_;

    for(my $upper=scalar(@$array);--$upper;) {
        my $lower=int(rand($upper+1));
        next if $lower == $upper;
        @$array[$lower,$upper] = @$array[$upper,$lower];
    }
}

1;

#!/usr/bin/env python3

# Copyright [1999-2015] Wellcome Trust Sanger Institute and the EMBL-European Bioinformatics Institute
# Copyright [2016-2020] EMBL-European Bioinformatics Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


import os
import sys

import eHive

## One method per mode

def do_version():
    print(eHive.__version__)

def do_check_exists():
    eHive.find_module(sys.argv[2])

def do_run():
    runnable = eHive.find_module(sys.argv[2])
    try:
        fd_in = int(sys.argv[3])
        fd_out = int(sys.argv[4])
        debug = int(sys.argv[5])
    except:
        usage('Cannot read the file descriptors as integers')
    runnable(fd_in, fd_out, debug)

def do_build():
    print("Nothing to do")
    return

## And here we select the mode

available_modes = {
        'version' : (do_version, []),
        'build'   : (do_build, []),
        'check_exists' : (do_check_exists, ['module_name']),
        'run'     : (do_run, ['module_name', 'fd_in', 'fd_out', 'debug'])
    }

def usage(msg):
    error = "Command-line error: " + msg + "\nUsage: \n"
    for (mode, (_, args)) in available_modes.items():
        error += "\t" + " ".join([sys.argv[0], mode] + args) + "\n"
    print(error, file=sys.stderr)
    sys.exit(1)

if len(sys.argv) == 1:
    usage('No mode provided')

mode = sys.argv[1]
if mode not in available_modes:
    usage('Unknown mode "{0}"'.format(mode))

if len(sys.argv)-2 < len(available_modes[mode][1]):
    usage('Not enough arguments for mode "' + mode + '". Expecting: ' + ' '.join(available_modes[mode][1]))
if len(sys.argv)-2 > len(available_modes[mode][1]):
    usage('Too many arguments for mode "' + mode + '". Expecting: ' + (' '.join(available_modes[mode][1]) if len(available_modes[mode][1]) else '(none)'))

available_modes[mode][0]()

